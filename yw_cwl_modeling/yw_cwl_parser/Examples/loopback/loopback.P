
% FACT: program(program_id, program_name, qualified_program_name, begin_annotation_id, end_annotation_id).
program(1, 'loopback', 'loopback', 1, 21).
program(2, 'step1', 'loopback.step1', 4, 10).
program(3, 'step2', 'loopback.step2', 11, 15).
program(4, 'step3', 'loopback.step3', 16, 20).

% FACT: workflow(program_id).
workflow(1).

% FACT: function(program_id).

% FACT: has_subprogram(program_id, subprogram_id).
has_subprogram(1, 2).
has_subprogram(1, 3).
has_subprogram(1, 4).

% FACT: port(port_id, port_type, port_name, qualified_port_name, port_annotation_id, data_id).
port(1, 'in', 'input1', 'loopback<-input1', 2, 1).
port(2, 'out', 'final_output', 'loopback->final_output', 3, 2).
port(3, 'in', 'input1_step1', 'loopback.step1<-input1_step1', 5, 3).
port(4, 'in', 'input2_step1', 'loopback.step1<-input2_step1', 7, 4).
port(5, 'out', 'output1_step1', 'loopback.step1->output1_step1', 9, 5).
port(6, 'in', 'input2_step1', 'loopback.step2<-input2_step1', 12, 5).
port(7, 'out', 'output1_step2', 'loopback.step2->output1_step2', 14, 6).
port(8, 'in', 'input', 'loopback.step3<-input', 17, 6).
port(9, 'out', 'final_output', 'loopback.step3->final_output', 19, 4).

% FACT: port_alias(port_id, alias).
port_alias(3, 'input1').
port_alias(4, 'final_output').
port_alias(6, 'output1_step1').
port_alias(8, 'output1_step2').

% FACT: port_uri_template(port_id, uri).

% FACT: has_in_port(block_id, port_id).
has_in_port(1, 1).
has_in_port(2, 3).
has_in_port(2, 4).
has_in_port(3, 6).
has_in_port(4, 8).

% FACT: has_out_port(block_id, port_id).
has_out_port(1, 2).
has_out_port(2, 5).
has_out_port(3, 7).
has_out_port(4, 9).

% FACT: data(data_id, data_name, qualified_data_name).
data(1, 'input1', '[input1]').
data(2, 'final_output', '[final_output]').
data(3, 'input1', 'loopback[input1]').
data(4, 'final_output', 'loopback[final_output]').
data(5, 'output1_step1', 'loopback[output1_step1]').
data(6, 'output1_step2', 'loopback[output1_step2]').

% FACT: channel(channel_id, data_id).
channel(1, 2).
channel(2, 4).
channel(3, 3).
channel(4, 5).
channel(5, 6).
channel(6, 1).
channel(7, 4).

% FACT: port_connects_to_channel(port_id, channel_id).
port_connects_to_channel(9, 1).
port_connects_to_channel(9, 2).
port_connects_to_channel(4, 2).
port_connects_to_channel(3, 3).
port_connects_to_channel(5, 4).
port_connects_to_channel(6, 4).
port_connects_to_channel(7, 5).
port_connects_to_channel(8, 5).
port_connects_to_channel(3, 6).
port_connects_to_channel(9, 7).

% FACT: inflow_connects_to_channel(port_id, channel_id).
inflow_connects_to_channel(1, 3).
inflow_connects_to_channel(1, 6).

% FACT: outflow_connects_to_channel(port_id, channel_id).
outflow_connects_to_channel(2, 1).
outflow_connects_to_channel(2, 7).

% FACT: uri_variable(uri_variable_id, variable_name, port_id).

% FACT: log_template(log_template_id, port_id, entry_template, log_annotation_id).

% FACT: log_template_variable(log_variable_id, variable_name, log_template_id).

% FACT: extract_source(source_id, source_path).
extract_source(1, '').

% FACT: annotation(annotation_id, source_id, line_number, tag, keyword, value).
annotation(1, 1, 1, 'begin', '@begin', 'loopback').
annotation(2, 1, 2, 'in', '@in', 'input1').
annotation(3, 1, 3, 'out', '@out', 'final_output').
annotation(4, 1, 5, 'begin', '@begin', 'step1').
annotation(5, 1, 6, 'in', '@in', 'input1_step1').
annotation(6, 1, 6, 'as', '@as', 'input1').
annotation(7, 1, 7, 'in', '@in', 'input2_step1').
annotation(8, 1, 7, 'as', '@as', 'final_output').
annotation(9, 1, 8, 'out', '@out', 'output1_step1').
annotation(10, 1, 9, 'end', '@end', 'step1').
annotation(11, 1, 11, 'begin', '@begin', 'step2').
annotation(12, 1, 12, 'in', '@in', 'input2_step1').
annotation(13, 1, 12, 'as', '@as', 'output1_step1').
annotation(14, 1, 13, 'out', '@out', 'output1_step2').
annotation(15, 1, 14, 'end', '@end', 'step2').
annotation(16, 1, 16, 'begin', '@begin', 'step3').
annotation(17, 1, 17, 'in', '@in', 'input').
annotation(18, 1, 17, 'as', '@as', 'output1_step2').
annotation(19, 1, 20, 'out', '@out', 'final_output').
annotation(20, 1, 21, 'end', '@end', 'step3').
annotation(21, 1, 23, 'end', '@end', 'loopback').

% FACT: annotation_qualifies(qualifying_annotation_id, primary_annotation_id).
annotation_qualifies(6, 5).
annotation_qualifies(8, 7).
annotation_qualifies(13, 12).
annotation_qualifies(18, 17).
