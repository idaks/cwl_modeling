
% FACT: program(program_id, program_name, qualified_program_name, begin_annotation_id, end_annotation_id).
program(1, 'simulate_data_collection', 'simulate_data_collection', 1, 104).
program(2, 'initialize_run', 'simulate_data_collection.initialize_run', 24, 29).
program(3, 'load_screening_results', 'simulate_data_collection.load_screening_results', 30, 38).
program(4, 'calculate_strategy', 'simulate_data_collection.calculate_strategy', 39, 49).
program(5, 'log_rejected_sample', 'simulate_data_collection.log_rejected_sample', 50, 56).
program(6, 'collect_data_set', 'simulate_data_collection.collect_data_set', 57, 75).
program(7, 'transform_images', 'simulate_data_collection.transform_images', 76, 92).
program(8, 'log_average_image_intensity', 'simulate_data_collection.log_average_image_intensity', 93, 103).
program(9, 'calculate_strategy', 'calculate_strategy', 105, 114).
program(10, 'collect_next_image', 'collect_next_image', 115, 125).
program(11, 'transform_image', 'transform_image', 126, 132).

% FACT: workflow(program_id).
workflow(1).

% FACT: function(program_id).
function(9).
function(10).
function(11).

% FACT: has_subprogram(program_id, subprogram_id).
has_subprogram(1, 2).
has_subprogram(1, 3).
has_subprogram(1, 4).
has_subprogram(1, 5).
has_subprogram(1, 6).
has_subprogram(1, 7).
has_subprogram(1, 8).

% FACT: port(port_id, port_type, port_name, qualified_port_name, port_annotation_id, data_id).
port(1, 'param', 'cassette_id', 'simulate_data_collection<-cassette_id', 3, 1).
port(2, 'param', 'sample_score_cutoff', 'simulate_data_collection<-sample_score_cutoff', 5, 2).
port(3, 'param', 'data_redundancy', 'simulate_data_collection<-data_redundancy', 7, 3).
port(4, 'in', 'sample_spreadsheet', 'simulate_data_collection<-sample_spreadsheet', 9, 4).
port(5, 'in', 'calibration_image', 'simulate_data_collection<-calibration_image', 12, 5).
port(6, 'out', 'corrected_image', 'simulate_data_collection->corrected_image', 15, 6).
port(7, 'out', 'run_log', 'simulate_data_collection->run_log', 18, 7).
port(8, 'out', 'collection_log', 'simulate_data_collection->collection_log', 20, 8).
port(9, 'out', 'rejection_log', 'simulate_data_collection->rejection_log', 22, 9).
port(10, 'param', 'cassette_id', 'simulate_data_collection.initialize_run<-cassette_id', 26, 10).
port(11, 'param', 'sample_score_cutoff', 'simulate_data_collection.initialize_run<-sample_score_cutoff', 27, 11).
port(12, 'out', 'run_log', 'simulate_data_collection.initialize_run->run_log', 28, 12).
port(13, 'param', 'cassette_id', 'simulate_data_collection.load_screening_results<-cassette_id', 32, 10).
port(14, 'in', 'sample_spreadsheet', 'simulate_data_collection.load_screening_results<-sample_spreadsheet', 33, 13).
port(15, 'out', 'sample_name', 'simulate_data_collection.load_screening_results->sample_name', 35, 14).
port(16, 'out', 'sample_quality', 'simulate_data_collection.load_screening_results->sample_quality', 36, 15).
port(17, 'out', 'run_log', 'simulate_data_collection.load_screening_results->run_log', 37, 12).
port(18, 'param', 'sample_score_cutoff', 'simulate_data_collection.calculate_strategy<-sample_score_cutoff', 41, 11).
port(19, 'param', 'data_redundancy', 'simulate_data_collection.calculate_strategy<-data_redundancy', 42, 16).
port(20, 'in', 'sample_name', 'simulate_data_collection.calculate_strategy<-sample_name', 43, 14).
port(21, 'in', 'sample_quality', 'simulate_data_collection.calculate_strategy<-sample_quality', 44, 15).
port(22, 'out', 'accepted_sample', 'simulate_data_collection.calculate_strategy->accepted_sample', 45, 17).
port(23, 'out', 'rejected_sample', 'simulate_data_collection.calculate_strategy->rejected_sample', 46, 18).
port(24, 'out', 'num_images', 'simulate_data_collection.calculate_strategy->num_images', 47, 19).
port(25, 'out', 'energies', 'simulate_data_collection.calculate_strategy->energies', 48, 20).
port(26, 'param', 'cassette_id', 'simulate_data_collection.log_rejected_sample<-cassette_id', 52, 10).
port(27, 'in', 'rejected_sample', 'simulate_data_collection.log_rejected_sample<-rejected_sample', 53, 18).
port(28, 'out', 'rejection_log', 'simulate_data_collection.log_rejected_sample->rejection_log', 54, 21).
port(29, 'param', 'cassette_id', 'simulate_data_collection.collect_data_set<-cassette_id', 60, 10).
port(30, 'param', 'num_images', 'simulate_data_collection.collect_data_set<-num_images', 61, 19).
port(31, 'in', 'accepted_sample', 'simulate_data_collection.collect_data_set<-accepted_sample', 62, 17).
port(32, 'in', 'energies', 'simulate_data_collection.collect_data_set<-energies', 63, 20).
port(33, 'out', 'sample_id', 'simulate_data_collection.collect_data_set->sample_id', 64, 22).
port(34, 'out', 'energy', 'simulate_data_collection.collect_data_set->energy', 66, 23).
port(35, 'out', 'frame_number', 'simulate_data_collection.collect_data_set->frame_number', 68, 24).
port(36, 'out', 'raw_image_path', 'simulate_data_collection.collect_data_set->raw_image_path', 70, 25).
port(37, 'out', 'run_log', 'simulate_data_collection.collect_data_set->run_log', 74, 12).
port(38, 'in', 'sample_id', 'simulate_data_collection.transform_images<-sample_id', 79, 22).
port(39, 'in', 'energy', 'simulate_data_collection.transform_images<-energy', 80, 23).
port(40, 'in', 'frame_number', 'simulate_data_collection.transform_images<-frame_number', 81, 24).
port(41, 'in', 'raw_image_path', 'simulate_data_collection.transform_images<-raw_image_path', 82, 25).
port(42, 'in', 'calibration_image', 'simulate_data_collection.transform_images<-calibration_image', 84, 26).
port(43, 'out', 'corrected_image', 'simulate_data_collection.transform_images->corrected_image', 86, 27).
port(44, 'out', 'corrected_image_path', 'simulate_data_collection.transform_images->corrected_image_path', 88, 28).
port(45, 'out', 'total_intensity', 'simulate_data_collection.transform_images->total_intensity', 89, 29).
port(46, 'out', 'pixel_count', 'simulate_data_collection.transform_images->pixel_count', 90, 30).
port(47, 'out', 'run_log', 'simulate_data_collection.transform_images->run_log', 91, 12).
port(48, 'param', 'cassette_id', 'simulate_data_collection.log_average_image_intensity<-cassette_id', 95, 10).
port(49, 'param', 'sample_id', 'simulate_data_collection.log_average_image_intensity<-sample_id', 96, 22).
port(50, 'param', 'frame_number', 'simulate_data_collection.log_average_image_intensity<-frame_number', 97, 24).
port(51, 'in', 'corrected_image_path', 'simulate_data_collection.log_average_image_intensity<-corrected_image_path', 98, 28).
port(52, 'in', 'total_intensity', 'simulate_data_collection.log_average_image_intensity<-total_intensity', 99, 29).
port(53, 'in', 'pixel_count', 'simulate_data_collection.log_average_image_intensity<-pixel_count', 100, 30).
port(54, 'out', 'collection_log', 'simulate_data_collection.log_average_image_intensity->collection_log', 101, 31).
port(55, 'param', 'sample_name', 'calculate_strategy<-sample_name', 106, 14).
port(56, 'param', 'sample_quality', 'calculate_strategy<-sample_quality', 107, 15).
port(57, 'param', 'sample_score_cutoff', 'calculate_strategy<-sample_score_cutoff', 108, 11).
port(58, 'param', 'data_redundancy', 'calculate_strategy<-data_redundancy', 109, 16).
port(63, 'param', 'cassette_id', 'collect_next_image<-cassette_id', 116, 10).
port(64, 'param', 'sample_id', 'collect_next_image<-sample_id', 117, 22).
port(65, 'param', 'num_images', 'collect_next_image<-num_images', 118, 19).
port(66, 'param', 'energies', 'collect_next_image<-energies', 119, 20).
port(67, 'param', 'image_path_template', 'collect_next_image<-image_path_template', 120, 32).
port(72, 'param', 'raw_image_path', 'transform_image<-raw_image_path', 127, 34).
port(73, 'param', 'corrected_image_path', 'transform_image<-corrected_image_path', 128, 28).
port(74, 'param', 'calibration_image_path', 'transform_image<-calibration_image_path', 129, 35).

% FACT: port_alias(port_id, alias).
port_alias(36, 'raw_image').
port_alias(41, 'raw_image').

% FACT: port_uri_template(port_id, uri).
port_uri_template(4, 'file:cassette_{cassette_id}_spreadsheet.csv').
port_uri_template(5, 'file:calibration.img').
port_uri_template(6, 'file:run/data/{}/{}_{}eV_{}.img').
port_uri_template(7, 'file:run/run_log.txt').
port_uri_template(8, 'file:run/collected_images.csv').
port_uri_template(9, 'file:run/rejected_samples.txt').
port_uri_template(14, 'file:cassette_{cassette_id}_spreadsheet.csv').
port_uri_template(28, 'file:run/rejected_samples.txt').
port_uri_template(36, 'file:run/raw/{cassette_id}/{sample_id}/e{energy}/image_{frame_number}.raw').
port_uri_template(42, 'file:calibration.img').
port_uri_template(43, 'file:run/data/{sample_id}/{sample_id}_{energy}eV_{frame_number}.img').
port_uri_template(54, 'file:run/collected_images.csv').

% FACT: has_in_port(block_id, port_id).
has_in_port(1, 1).
has_in_port(1, 2).
has_in_port(1, 3).
has_in_port(1, 4).
has_in_port(1, 5).
has_in_port(2, 10).
has_in_port(2, 11).
has_in_port(3, 13).
has_in_port(3, 14).
has_in_port(4, 18).
has_in_port(4, 19).
has_in_port(4, 20).
has_in_port(4, 21).
has_in_port(5, 26).
has_in_port(5, 27).
has_in_port(6, 29).
has_in_port(6, 30).
has_in_port(6, 31).
has_in_port(6, 32).
has_in_port(7, 38).
has_in_port(7, 39).
has_in_port(7, 40).
has_in_port(7, 41).
has_in_port(7, 42).
has_in_port(8, 48).
has_in_port(8, 49).
has_in_port(8, 50).
has_in_port(8, 51).
has_in_port(8, 52).
has_in_port(8, 53).
has_in_port(9, 55).
has_in_port(9, 56).
has_in_port(9, 57).
has_in_port(9, 58).
has_in_port(10, 63).
has_in_port(10, 64).
has_in_port(10, 65).
has_in_port(10, 66).
has_in_port(10, 67).
has_in_port(11, 72).
has_in_port(11, 73).
has_in_port(11, 74).

% FACT: has_out_port(block_id, port_id).
has_out_port(1, 6).
has_out_port(1, 7).
has_out_port(1, 8).
has_out_port(1, 9).
has_out_port(2, 12).
has_out_port(3, 15).
has_out_port(3, 16).
has_out_port(3, 17).
has_out_port(4, 22).
has_out_port(4, 23).
has_out_port(4, 24).
has_out_port(4, 25).
has_out_port(5, 28).
has_out_port(6, 33).
has_out_port(6, 34).
has_out_port(6, 35).
has_out_port(6, 36).
has_out_port(6, 37).
has_out_port(7, 43).
has_out_port(7, 44).
has_out_port(7, 45).
has_out_port(7, 46).
has_out_port(7, 47).
has_out_port(8, 54).

% FACT: data(data_id, data_name, qualified_data_name).
data(1, 'cassette_id', '[cassette_id]').
data(2, 'sample_score_cutoff', '[sample_score_cutoff]').
data(3, 'data_redundancy', '[data_redundancy]').
data(4, 'sample_spreadsheet', '[sample_spreadsheet]').
data(5, 'calibration_image', '[calibration_image]').
data(6, 'corrected_image', '[corrected_image]').
data(7, 'run_log', '[run_log]').
data(8, 'collection_log', '[collection_log]').
data(9, 'rejection_log', '[rejection_log]').
data(10, 'cassette_id', 'simulate_data_collection[cassette_id]').
data(11, 'sample_score_cutoff', 'simulate_data_collection[sample_score_cutoff]').
data(12, 'run_log', 'simulate_data_collection[run_log]').
data(13, 'sample_spreadsheet', 'simulate_data_collection[sample_spreadsheet]').
data(14, 'sample_name', 'simulate_data_collection[sample_name]').
data(15, 'sample_quality', 'simulate_data_collection[sample_quality]').
data(16, 'data_redundancy', 'simulate_data_collection[data_redundancy]').
data(17, 'accepted_sample', 'simulate_data_collection[accepted_sample]').
data(18, 'rejected_sample', 'simulate_data_collection[rejected_sample]').
data(19, 'num_images', 'simulate_data_collection[num_images]').
data(20, 'energies', 'simulate_data_collection[energies]').
data(21, 'rejection_log', 'simulate_data_collection[rejection_log]').
data(22, 'sample_id', 'simulate_data_collection[sample_id]').
data(23, 'energy', 'simulate_data_collection[energy]').
data(24, 'frame_number', 'simulate_data_collection[frame_number]').
data(25, 'raw_image', 'simulate_data_collection[raw_image]').
data(26, 'calibration_image', 'simulate_data_collection[calibration_image]').
data(27, 'corrected_image', 'simulate_data_collection[corrected_image]').
data(28, 'corrected_image_path', 'simulate_data_collection[corrected_image_path]').
data(29, 'total_intensity', 'simulate_data_collection[total_intensity]').
data(30, 'pixel_count', 'simulate_data_collection[pixel_count]').
data(31, 'collection_log', 'simulate_data_collection[collection_log]').

% FACT: channel(channel_id, data_id).
channel(1, 6).
channel(2, 7).
channel(3, 8).
channel(4, 9).
channel(5, 10).
channel(6, 10).
channel(7, 10).
channel(8, 10).
channel(9, 10).
channel(10, 11).
channel(11, 11).
channel(12, 13).
channel(13, 16).
channel(14, 14).
channel(15, 15).
channel(16, 18).
channel(17, 19).
channel(18, 17).
channel(19, 20).
channel(20, 22).
channel(21, 22).
channel(22, 23).
channel(23, 24).
channel(24, 24).
channel(25, 25).
channel(26, 26).
channel(27, 28).
channel(28, 29).
channel(29, 30).
channel(30, 1).
channel(31, 1).
channel(32, 1).
channel(33, 1).
channel(34, 1).
channel(35, 2).
channel(36, 2).
channel(37, 3).
channel(38, 4).
channel(39, 5).
channel(40, 27).
channel(41, 12).
channel(42, 31).
channel(43, 21).

% FACT: port_connects_to_channel(port_id, channel_id).
port_connects_to_channel(43, 1).
port_connects_to_channel(47, 2).
port_connects_to_channel(54, 3).
port_connects_to_channel(28, 4).
port_connects_to_channel(10, 5).
port_connects_to_channel(13, 6).
port_connects_to_channel(26, 7).
port_connects_to_channel(29, 8).
port_connects_to_channel(48, 9).
port_connects_to_channel(11, 10).
port_connects_to_channel(18, 11).
port_connects_to_channel(14, 12).
port_connects_to_channel(19, 13).
port_connects_to_channel(15, 14).
port_connects_to_channel(20, 14).
port_connects_to_channel(16, 15).
port_connects_to_channel(21, 15).
port_connects_to_channel(23, 16).
port_connects_to_channel(27, 16).
port_connects_to_channel(24, 17).
port_connects_to_channel(30, 17).
port_connects_to_channel(22, 18).
port_connects_to_channel(31, 18).
port_connects_to_channel(25, 19).
port_connects_to_channel(32, 19).
port_connects_to_channel(33, 20).
port_connects_to_channel(38, 20).
port_connects_to_channel(33, 21).
port_connects_to_channel(49, 21).
port_connects_to_channel(34, 22).
port_connects_to_channel(39, 22).
port_connects_to_channel(35, 23).
port_connects_to_channel(40, 23).
port_connects_to_channel(35, 24).
port_connects_to_channel(50, 24).
port_connects_to_channel(36, 25).
port_connects_to_channel(41, 25).
port_connects_to_channel(42, 26).
port_connects_to_channel(44, 27).
port_connects_to_channel(51, 27).
port_connects_to_channel(45, 28).
port_connects_to_channel(52, 28).
port_connects_to_channel(46, 29).
port_connects_to_channel(53, 29).
port_connects_to_channel(10, 30).
port_connects_to_channel(13, 31).
port_connects_to_channel(26, 32).
port_connects_to_channel(29, 33).
port_connects_to_channel(48, 34).
port_connects_to_channel(11, 35).
port_connects_to_channel(18, 36).
port_connects_to_channel(19, 37).
port_connects_to_channel(14, 38).
port_connects_to_channel(42, 39).
port_connects_to_channel(43, 40).
port_connects_to_channel(47, 41).
port_connects_to_channel(54, 42).
port_connects_to_channel(28, 43).

% FACT: inflow_connects_to_channel(port_id, channel_id).
inflow_connects_to_channel(1, 5).
inflow_connects_to_channel(1, 6).
inflow_connects_to_channel(1, 7).
inflow_connects_to_channel(1, 8).
inflow_connects_to_channel(1, 9).
inflow_connects_to_channel(2, 10).
inflow_connects_to_channel(2, 11).
inflow_connects_to_channel(4, 12).
inflow_connects_to_channel(3, 13).
inflow_connects_to_channel(5, 26).
inflow_connects_to_channel(1, 30).
inflow_connects_to_channel(1, 31).
inflow_connects_to_channel(1, 32).
inflow_connects_to_channel(1, 33).
inflow_connects_to_channel(1, 34).
inflow_connects_to_channel(2, 35).
inflow_connects_to_channel(2, 36).
inflow_connects_to_channel(3, 37).
inflow_connects_to_channel(4, 38).
inflow_connects_to_channel(5, 39).

% FACT: outflow_connects_to_channel(port_id, channel_id).
outflow_connects_to_channel(6, 1).
outflow_connects_to_channel(7, 2).
outflow_connects_to_channel(8, 3).
outflow_connects_to_channel(9, 4).
outflow_connects_to_channel(6, 40).
outflow_connects_to_channel(7, 41).
outflow_connects_to_channel(8, 42).
outflow_connects_to_channel(9, 43).

% FACT: uri_variable(uri_variable_id, variable_name, port_id).
uri_variable(1, 'cassette_id', 4).
uri_variable(2, 'cassette_id', 14).
uri_variable(3, 'cassette_id', 36).
uri_variable(4, 'sample_id', 36).
uri_variable(5, 'energy', 36).
uri_variable(6, 'frame_number', 36).
uri_variable(7, 'sample_id', 43).
uri_variable(8, 'energy', 43).
uri_variable(9, 'frame_number', 43).